unit SimpleDAOSQLAttribute;

interface

uses
  SimpleInterface;

Type
  TSimpleDAOSQLAttribute<T> = class(TInterfacedObject, iSimpleDAOSQLAttribute<T>)
    private
      [weak]
      FParent : iSimpleDAO<T>;
      FFields : String;
      FWhere : String;
      FOrderBy : String;
    public
      constructor Create(Parent : iSimpleDAO<T>);
      destructor Destroy; override;
      class function New(Parent : iSimpleDAO<T>) : iSimpleDAOSQLAttribute<T>;
      function Fields (aSQL : String) : iSimpleDAOSQLAttribute<T>;
      function Where (aSQL : String) : iSimpleDAOSQLAttribute<T>;
      function OrderBy (aSQL : String) : iSimpleDAOSQLAttribute<T>;
      function &End : iSimpleDAO<T>;
  end;

implementation

{ TSimpleDAOSQLAttribute<T> }

function TSimpleDAOSQLAttribute<T>.&End: iSimpleDAO<T>;
begin
  Result := FParent;
end;

constructor TSimpleDAOSQLAttribute<T>.Create(Parent : iSimpleDAO<T>);
begin
  FParent := Parent;
end;

destructor TSimpleDAOSQLAttribute<T>.Destroy;
begin

  inherited;
end;

function TSimpleDAOSQLAttribute<T>.Fields(
  aSQL: String): iSimpleDAOSQLAttribute<T>;
begin
  Result := Self;
  FFields := aSQL;
end;

class function TSimpleDAOSQLAttribute<T>.New(Parent : iSimpleDAO<T>): iSimpleDAOSQLAttribute<T>;
begin
  Result := Self.Create(Parent);
end;

function TSimpleDAOSQLAttribute<T>.OrderBy(
  aSQL: String): iSimpleDAOSQLAttribute<T>;
begin
  Result := Self;
  FOrderBy := aSQL;
end;

function TSimpleDAOSQLAttribute<T>.Where(
  aSQL: String): iSimpleDAOSQLAttribute<T>;
begin
  Result := Self;
  FWhere := aSQL;
end;

end.
